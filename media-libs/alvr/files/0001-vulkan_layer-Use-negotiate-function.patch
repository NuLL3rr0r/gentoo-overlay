From 7107c2b5d19c242604f7ee3c3da7a828d5c4e7d5 Mon Sep 17 00:00:00 2001
From: David Rosca <nowrep@gmail.com>
Date: Wed, 1 Mar 2023 10:06:14 +0100
Subject: [PATCH] vulkan_layer: Use negotiate function

Also remove VK_LAYER_EXPORT and reduce exported symbols.
---
 alvr/vulkan_layer/layer/alvr_x86_64.json |  5 +-
 alvr/vulkan_layer/layer/layer.cpp        | 65 +++++++++---------------
 alvr/vulkan_layer/layer/layer.h          |  3 +-
 alvr/vulkan_layer/src/lib.rs             | 17 ++-----
 4 files changed, 33 insertions(+), 57 deletions(-)

diff --git a/alvr/vulkan_layer/layer/alvr_x86_64.json b/alvr/vulkan_layer/layer/alvr_x86_64.json
index d0044b892..c9d502fcd 100644
--- a/alvr/vulkan_layer/layer/alvr_x86_64.json
+++ b/alvr/vulkan_layer/layer/alvr_x86_64.json
@@ -1,5 +1,5 @@
 {
-	"file_format_version" : "1.0.0",
+	"file_format_version" : "1.1.2",
 	"layer" : {
 		"name": "VK_LAYER_ALVR_capture",
 		"type": "GLOBAL",
@@ -31,6 +31,9 @@
 				"spec_version" : "1"
 			}
 		],
+		"functions": {
+			"vkNegotiateLoaderLayerInterfaceVersion" : "ALVR_Negotiate"
+		},
 		"disable_environment": {
 			"DISABLE_ALVR_DISPLAY": "1"
 		}
diff --git a/alvr/vulkan_layer/layer/layer.cpp b/alvr/vulkan_layer/layer/layer.cpp
index 1445226f6..1baa7f5db 100644
--- a/alvr/vulkan_layer/layer/layer.cpp
+++ b/alvr/vulkan_layer/layer/layer.cpp
@@ -312,60 +312,32 @@ VKAPI_ATTR VkResult create_device(VkPhysicalDevice physicalDevice,
     return VK_SUCCESS;
 }
 
-} /* namespace layer */
-
-extern "C" {
-VK_LAYER_EXPORT PFN_vkVoidFunction VKAPI_CALL wsi_layer_vkGetDeviceProcAddr(VkDevice device,
-                                                                            const char *funcName);
-
-VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
-wsi_layer_vkGetInstanceProcAddr(VkInstance instance, const char *funcName);
-
 /* Clean up the dispatch table for this instance. */
-VK_LAYER_EXPORT VKAPI_ATTR void VKAPI_CALL
+VKAPI_ATTR void VKAPI_CALL
 wsi_layer_vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks *pAllocator) {
     assert(instance);
     layer::instance_private_data::get(instance).disp.DestroyInstance(instance, pAllocator);
     layer::instance_private_data::destroy(instance);
 }
 
-VK_LAYER_EXPORT VKAPI_ATTR void VKAPI_CALL
+VKAPI_ATTR void VKAPI_CALL
 wsi_layer_vkDestroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator) {
     layer::device_private_data::destroy(device);
 }
 
-VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL
+VKAPI_ATTR VkResult VKAPI_CALL
 wsi_layer_vkCreateInstance(const VkInstanceCreateInfo *pCreateInfo,
                            const VkAllocationCallbacks *pAllocator, VkInstance *pInstance) {
     return layer::create_instance(pCreateInfo, pAllocator, pInstance);
 }
 
-VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL
+VKAPI_ATTR VkResult VKAPI_CALL
 wsi_layer_vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCreateInfo,
                          const VkAllocationCallbacks *pAllocator, VkDevice *pDevice) {
     return layer::create_device(physicalDevice, pCreateInfo, pAllocator, pDevice);
 }
 
-VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL
-vkNegotiateLoaderLayerInterfaceVersion(VkNegotiateLayerInterface *pVersionStruct) {
-    assert(pVersionStruct);
-    assert(pVersionStruct->sType == LAYER_NEGOTIATE_INTERFACE_STRUCT);
-
-    /* 2 is the minimum interface version which would utilize this function. */
-    assert(pVersionStruct->loaderLayerInterfaceVersion >= 2);
-
-    /* Set our requested interface version. Set to 2 for now to separate us from newer versions. */
-    pVersionStruct->loaderLayerInterfaceVersion = 2;
-
-    /* Fill in struct values. */
-    pVersionStruct->pfnGetInstanceProcAddr = &wsi_layer_vkGetInstanceProcAddr;
-    pVersionStruct->pfnGetDeviceProcAddr = &wsi_layer_vkGetDeviceProcAddr;
-    pVersionStruct->pfnGetPhysicalDeviceProcAddr = nullptr;
-
-    return VK_SUCCESS;
-}
-
-VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL wsi_layer_vkEnumerateDeviceExtensionProperties(
+VKAPI_ATTR VkResult VKAPI_CALL wsi_layer_vkEnumerateDeviceExtensionProperties(
     VkPhysicalDevice physicalDevice, const char *pLayerName, uint32_t *pCount,
     VkExtensionProperties *pProperties) {
     if (pLayerName && !strcmp(pLayerName, layer::global_layer.layerName))
@@ -376,7 +348,7 @@ VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL wsi_layer_vkEnumerateDeviceExtens
         .disp.EnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pCount, pProperties);
 }
 
-VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL wsi_layer_vkEnumerateInstanceExtensionProperties(
+VKAPI_ATTR VkResult VKAPI_CALL wsi_layer_vkEnumerateInstanceExtensionProperties(
     const char *pLayerName, uint32_t *pCount, VkExtensionProperties *pProperties) {
     if (pLayerName && !strcmp(pLayerName, layer::global_layer.layerName))
         return layer::extension_properties(1, layer::instance_extension, pCount, pProperties);
@@ -384,7 +356,7 @@ VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL wsi_layer_vkEnumerateInstanceExte
     return VK_ERROR_LAYER_NOT_PRESENT;
 }
 
-VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL
+VKAPI_ATTR VkResult VKAPI_CALL
 wsi_layer_vkEnumerateInstanceLayerProperties(uint32_t *pCount, VkLayerProperties *pProperties) {
     return layer::layer_properties(1, &layer::global_layer, pCount, pProperties);
 }
@@ -394,9 +366,7 @@ wsi_layer_vkEnumerateInstanceLayerProperties(uint32_t *pCount, VkLayerProperties
         return (PFN_vkVoidFunction)&wsi_layer_##func;
 
 
-const char *g_sessionPath;
-
-VK_LAYER_EXPORT PFN_vkVoidFunction VKAPI_CALL wsi_layer_vkGetDeviceProcAddr(VkDevice device,
+PFN_vkVoidFunction VKAPI_CALL wsi_layer_vkGetDeviceProcAddr(VkDevice device,
                                                                             const char *funcName) {
     GET_PROC_ADDR(vkCreateSwapchainKHR);
     GET_PROC_ADDR(vkDestroySwapchainKHR);
@@ -412,7 +382,7 @@ VK_LAYER_EXPORT PFN_vkVoidFunction VKAPI_CALL wsi_layer_vkGetDeviceProcAddr(VkDe
     return layer::device_private_data::get(device).disp.GetDeviceProcAddr(device, funcName);
 }
 
-VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
+VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL
 wsi_layer_vkGetInstanceProcAddr(VkInstance instance, const char *funcName) {
     GET_PROC_ADDR(vkGetDeviceProcAddr);
     GET_PROC_ADDR(vkGetInstanceProcAddr);
@@ -439,4 +409,19 @@ wsi_layer_vkGetInstanceProcAddr(VkInstance instance, const char *funcName) {
 
     return layer::instance_private_data::get(instance).disp.GetInstanceProcAddr(instance, funcName);
 }
-} /* extern "C" */
+
+} /* namespace layer */
+
+const char *g_sessionPath;
+
+VKAPI_ATTR VkResult VKAPI_CALL wsi_layer_Negotiate(VkNegotiateLayerInterface *nli)
+{
+    if (nli->loaderLayerInterfaceVersion < 2)
+        return VK_ERROR_INITIALIZATION_FAILED;
+
+    nli->loaderLayerInterfaceVersion = 2;
+    nli->pfnGetInstanceProcAddr = layer::wsi_layer_vkGetInstanceProcAddr;
+    nli->pfnGetDeviceProcAddr = layer::wsi_layer_vkGetDeviceProcAddr;
+
+    return VK_SUCCESS;
+}
diff --git a/alvr/vulkan_layer/layer/layer.h b/alvr/vulkan_layer/layer/layer.h
index b17f8e582..bacb30a0d 100644
--- a/alvr/vulkan_layer/layer/layer.h
+++ b/alvr/vulkan_layer/layer/layer.h
@@ -4,5 +4,4 @@
 
 extern "C" const char *g_sessionPath;
 
-extern "C" VK_LAYER_EXPORT PFN_vkVoidFunction VKAPI_CALL wsi_layer_vkGetDeviceProcAddr(VkDevice device, const char *funcName);
-extern "C" VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL wsi_layer_vkGetInstanceProcAddr(VkInstance instance, const char *funcName);
+extern "C" VKAPI_ATTR VkResult VKAPI_CALL wsi_layer_Negotiate(VkNegotiateLayerInterface *nli);
diff --git a/alvr/vulkan_layer/src/lib.rs b/alvr/vulkan_layer/src/lib.rs
index a2be61eb5..f47a2ced9 100644
--- a/alvr/vulkan_layer/src/lib.rs
+++ b/alvr/vulkan_layer/src/lib.rs
@@ -1,6 +1,6 @@
 #![cfg(target_os = "linux")]
 
-use std::ffi::{c_char, CString};
+use std::ffi::CString;
 
 #[allow(
     non_camel_case_types,
@@ -14,10 +14,7 @@ mod bindings {
 use bindings::*;
 
 #[no_mangle]
-pub unsafe extern "C" fn vkGetInstanceProcAddr(
-    instance: VkInstance,
-    p_name: *const c_char,
-) -> PFN_vkVoidFunction {
+pub unsafe extern "C" fn ALVR_Negotiate(nli: *mut VkNegotiateLayerInterface) -> VkResult {
     g_sessionPath = CString::new(
         alvr_filesystem::filesystem_layout_invalid()
             .session()
@@ -27,13 +24,5 @@ pub unsafe extern "C" fn vkGetInstanceProcAddr(
     .unwrap()
     .into_raw();
 
-    bindings::wsi_layer_vkGetInstanceProcAddr(instance, p_name)
-}
-
-#[no_mangle]
-pub unsafe extern "C" fn vkGetDeviceProcAddr(
-    instance: VkDevice,
-    p_name: *const c_char,
-) -> PFN_vkVoidFunction {
-    bindings::wsi_layer_vkGetDeviceProcAddr(instance, p_name)
+    bindings::wsi_layer_Negotiate(nli)
 }
