From 5144698d3c40841274aaed5d1251a55073819aee Mon Sep 17 00:00:00 2001
From: Aidan Thornton <makosoft@gmail.com>
Date: Tue, 17 May 2022 10:01:31 +0100
Subject: [PATCH] Client audio: don't crash if server sends invalid sample rate

The server is buggy and sometimes chooses sample rates that are too
low for audio use, like 1 Hz. Currently this causes the client audio
code to get really confused about its buffer sizes and crash. We
should refuse to use such sample rates. 8000 is the lowest sample
rate normally used for audio purposes, so reject anything below that.
---
 alvr/client/src/audio.rs | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/alvr/client/src/audio.rs b/alvr/client/src/audio.rs
index 5b7641b03..725569a05 100644
--- a/alvr/client/src/audio.rs
+++ b/alvr/client/src/audio.rs
@@ -91,6 +91,8 @@ impl AudioOutputCallback for PlayerCallback {
         _: &mut dyn AudioOutputStreamSafe,
         out_frames: &mut [(f32, f32)],
     ) -> DataCallbackResult {
+        assert!(self.batch_frames_count == out_frames.len());
+
         let samples = alvr_audio::get_next_frame_batch(
             &mut *self.sample_buffer.lock(),
             2,
@@ -109,6 +111,12 @@ pub async fn play_audio_loop(
     config: AudioConfig,
     receiver: StreamReceiver<()>,
 ) -> StrResult {
+    // the client sends invalid sample rates sometimes, and we crash if we try and use one
+    // (batch_frames_count ends up zero and the audio callback gets confused)
+    if sample_rate < 8000 {
+        return fmt_e!("Invalid audio sample rate");
+    }
+
     let batch_frames_count = sample_rate as usize * config.batch_ms as usize / 1000;
     let average_buffer_frames_count =
         sample_rate as usize * config.average_buffering_ms as usize / 1000;
