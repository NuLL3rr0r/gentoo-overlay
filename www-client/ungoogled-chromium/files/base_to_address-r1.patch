diff -Nur chromium-122.0.6261.69/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_unittest.cc chromium-122.0.6261.69-b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_unittest.cc
--- chromium-122.0.6261.69/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_unittest.cc	2024-02-23 10:42:43.216915800 +1300
+++ chromium-122.0.6261.69-b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_unittest.cc	2024-02-29 13:23:02.171077100 +1300
@@ -24,6 +24,7 @@
 #include "base/test/gtest_util.h"
 #include "base/test/memory/dangling_ptr_instrumentation.h"
 #include "base/test/scoped_feature_list.h"
+#include "base/types/to_address.h"
 #include "build/build_config.h"
 #include "build/buildflag.h"
 #include "partition_alloc/dangling_raw_ptr_checks.h"
@@ -1549,7 +1550,7 @@
 // `to_address()`.
 TEST_F(RawPtrTest, ToAddressDoesNotDereference) {
   CountingRawPtr<int> ptr = nullptr;
-  int* raw = std::to_address(ptr);
+  int* raw = base::to_address(ptr);
   std::ignore = raw;
   EXPECT_THAT((CountingRawPtrExpectations{.get_for_dereference_cnt = 0,
                                           .get_for_extraction_cnt = 1,
@@ -1561,7 +1562,7 @@
 TEST_F(RawPtrTest, ToAddressGivesBackRawAddress) {
   int* raw = nullptr;
   raw_ptr<int> miracle = raw;
-  EXPECT_EQ(std::to_address(raw), std::to_address(miracle));
+  EXPECT_EQ(base::to_address(raw), base::to_address(miracle));
 }
 
 void InOutParamFuncWithPointer(int* in, int** out) {
diff -Nur chromium-122.0.6261.69/base/containers/map_util.h chromium-122.0.6261.69-b/base/containers/map_util.h
--- chromium-122.0.6261.69/base/containers/map_util.h	2024-02-23 10:42:43.280920300 +1300
+++ chromium-122.0.6261.69-b/base/containers/map_util.h	2024-02-29 13:23:02.171077100 +1300
@@ -7,6 +7,8 @@
 
 #include <memory>
 
+#include "base/types/to_address.h"
+
 namespace base {
 
 namespace internal {
@@ -46,7 +48,7 @@
 constexpr const MappedElementType* FindPtrOrNull(const Map& map,
                                                  const Key& key) {
   auto it = map.find(key);
-  return it != map.end() ? std::to_address(it->second) : nullptr;
+  return it != map.end() ? base::to_address(it->second) : nullptr;
 }
 
 // Returns the pointer value associated with the given key. If none is found,
@@ -61,7 +63,7 @@
               std::pointer_traits<internal::MappedType<Map>>::element_type>
 constexpr MappedElementType* FindPtrOrNull(Map& map, const Key& key) {
   auto it = map.find(key);
-  return it != map.end() ? std::to_address(it->second) : nullptr;
+  return it != map.end() ? base::to_address(it->second) : nullptr;
 }
 
 }  // namespace base
diff -Nur chromium-122.0.6261.69/base/containers/span.h chromium-122.0.6261.69-b/base/containers/span.h
--- chromium-122.0.6261.69/base/containers/span.h	2024-02-23 10:42:43.284920700 +1300
+++ chromium-122.0.6261.69-b/base/containers/span.h	2024-02-29 13:23:37.064337189 +1300
@@ -22,6 +22,7 @@
 #include "base/containers/checked_iterators.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/template_util.h"
+#include "base/types/to_address.h"
 #include "third_party/abseil-cpp/absl/base/attributes.h"
 
 namespace base {
@@ -290,7 +290,7 @@
          // We can not protect here generally against an invalid iterator/count
          // being passed in, since we have no context to determine if the
          // iterator or count are valid.
-        data_(std::to_address(first)) {
+        data_(base::to_address(first)) {
     // Guarantees that the N in the type signature is correct.
     CHECK(N == count);
   }
@@ -409,7 +410,7 @@
       // We can not protect here generally against an invalid iterator/count
       // being passed in, since we have no context to determine if the
       // iterator or count are valid.
-      : data_(std::to_address(first)), size_(count) {}
+      : data_(base::to_address(first)), size_(count) {}
 
   template <typename It, typename End>
     requires(internal::CompatibleIter<T, It> &&
diff -Nur chromium-122.0.6261.69/base/functional/bind_internal.h chromium-122.0.6261.69-b/base/functional/bind_internal.h
--- chromium-122.0.6261.69/base/functional/bind_internal.h	2024-02-23 10:42:44.308922300 +1300
+++ chromium-122.0.6261.69-b/base/functional/bind_internal.h	2024-02-29 13:23:02.172077107 +1300
@@ -28,6 +28,7 @@
 #include "base/notreached.h"
 #include "base/types/always_false.h"
 #include "base/types/is_instantiation.h"
+#include "base/types/to_address.h"
 #include "build/build_config.h"
 #include "third_party/abseil-cpp/absl/functional/function_ref.h"
 
@@ -1270,9 +1271,9 @@
 };
 
 template <typename T>
-  requires requires(T&& t) { std::to_address(t); }
+  requires requires(T&& t) { base::to_address(t); }
 struct ValidateReceiverType<T> {
-  using Type = decltype(std::to_address(std::declval<T>()));
+  using Type = decltype(base::to_address(std::declval<T>()));
   static constexpr bool value = true;
 };
 
diff -Nur chromium-122.0.6261.69/base/strings/string_util.h chromium-122.0.6261.69-b/base/strings/string_util.h
--- chromium-122.0.6261.69/base/strings/string_util.h	2024-02-23 10:42:43.416929700 +1300
+++ chromium-122.0.6261.69-b/base/strings/string_util.h	2024-02-29 13:23:02.172077107 +1300
@@ -24,6 +24,7 @@
 #include "base/containers/span.h"
 #include "base/strings/string_piece.h"  // For implicit conversions.
 #include "base/strings/string_util_internal.h"
+#include "base/types/to_address.h"
 #include "build/build_config.h"
 
 namespace base {
@@ -94,7 +95,7 @@
 constexpr std::basic_string_view<CharT> MakeBasicStringPiece(Iter begin,
                                                              Iter end) {
   DCHECK_GE(end - begin, 0);
-  return {std::to_address(begin), static_cast<size_t>(end - begin)};
+  return {base::to_address(begin), static_cast<size_t>(end - begin)};
 }
 
 // Explicit instantiations of MakeBasicStringPiece for the BasicStringPiece
diff -Nur chromium-122.0.6261.69/base/types/to_address.h chromium-122.0.6261.69-b/base/types/to_address.h
--- chromium-122.0.6261.69/base/types/to_address.h	1970-01-01 12:00:00.000000000 +1200
+++ chromium-122.0.6261.69-b/base/types/to_address.h	2024-02-29 13:22:03.708641321 +1300
@@ -0,0 +1,40 @@
+// Copyright 2024 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_TYPES_TO_ADDRESS_H_
+#define BASE_TYPES_TO_ADDRESS_H_
+
+#include <memory>
+#include <type_traits>
+
+// SFINAE-compatible wrapper for `std::to_address()`.
+//
+// The standard does not require `std::to_address()` to be SFINAE-compatible
+// when code attempts instantiation with non-pointer-like types, and libstdc++'s
+// implementation hard errors. For the sake of templated code that wants simple,
+// unified handling, Chromium instead uses this wrapper, which provides that
+// guarantee. This allows code to use "`to_address()` would be valid here" as a
+// constraint to detect pointer-like types.
+namespace base {
+
+// Note that calling `std::to_address()` with a function pointer renders the
+// program ill-formed.
+template <typename T>
+  requires(!std::is_function_v<T>)
+constexpr T* to_address(T* p) noexcept {
+  return p;
+}
+
+// These constraints cover the cases where `std::to_address()`'s fancy pointer
+// overload is well-specified.
+template <typename P>
+  requires requires(const P& p) { std::pointer_traits<P>::to_address(p); } ||
+           requires(const P& p) { p.operator->(); }
+constexpr auto to_address(const P& p) noexcept {
+  return std::to_address(p);
+}
+
+}  // namespace base
+
+#endif  // BASE_TYPES_TO_ADDRESS_H_
diff -Nur chromium-122.0.6261.69/base/values.cc chromium-122.0.6261.69-b/base/values.cc
--- chromium-122.0.6261.69/base/values.cc	2024-02-23 10:42:43.604942800 +1300
+++ chromium-122.0.6261.69-b/base/values.cc	2024-02-29 13:24:25.189695897 +1300
@@ -25,6 +25,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/trace_event/base_tracing.h"
 #include "base/tracing_buildflags.h"
+#include "base/types/to_address.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "third_party/abseil-cpp/absl/types/variant.h"
 
@@ -941,36 +942,36 @@
 }
 
 Value::List::iterator Value::List::begin() {
-  return iterator(std::to_address(storage_.begin()),
-                  std::to_address(storage_.end()));
+  return iterator(base::to_address(storage_.begin()),
+                  base::to_address(storage_.end()));
 }
 
 Value::List::const_iterator Value::List::begin() const {
-  return const_iterator(std::to_address(storage_.begin()),
-                        std::to_address(storage_.end()));
+  return const_iterator(base::to_address(storage_.begin()),
+                        base::to_address(storage_.end()));
 }
 
 Value::List::const_iterator Value::List::cbegin() const {
-  return const_iterator(std::to_address(storage_.cbegin()),
-                        std::to_address(storage_.cend()));
+  return const_iterator(base::to_address(storage_.cbegin()),
+                        base::to_address(storage_.cend()));
 }
 
 Value::List::iterator Value::List::end() {
-  return iterator(std::to_address(storage_.begin()),
-                  std::to_address(storage_.end()),
-                  std::to_address(storage_.end()));
+  return iterator(base::to_address(storage_.begin()),
+                  base::to_address(storage_.end()),
+                  base::to_address(storage_.end()));
 }
 
 Value::List::const_iterator Value::List::end() const {
-  return const_iterator(std::to_address(storage_.begin()),
-                        std::to_address(storage_.end()),
-                        std::to_address(storage_.end()));
+  return const_iterator(base::to_address(storage_.begin()),
+                        base::to_address(storage_.end()),
+                        base::to_address(storage_.end()));
 }
 
 Value::List::const_iterator Value::List::cend() const {
-  return const_iterator(std::to_address(storage_.cbegin()),
-                        std::to_address(storage_.cend()),
-                        std::to_address(storage_.cend()));
+  return const_iterator(base::to_address(storage_.cbegin()),
+                        base::to_address(storage_.cend()),
+                        base::to_address(storage_.cend()));
 }
 
 Value::List::reverse_iterator Value::List::rend() {
@@ -1033,31 +1034,31 @@
 
 Value::List::iterator Value::List::erase(iterator pos) {
   auto next_it = storage_.erase(storage_.begin() + (pos - begin()));
-  return iterator(std::to_address(storage_.begin()), std::to_address(next_it),
-                  std::to_address(storage_.end()));
+  return iterator(base::to_address(storage_.begin()), base::to_address(next_it),
+                  base::to_address(storage_.end()));
 }
 
 Value::List::const_iterator Value::List::erase(const_iterator pos) {
   auto next_it = storage_.erase(storage_.begin() + (pos - begin()));
-  return const_iterator(std::to_address(storage_.begin()),
-                        std::to_address(next_it),
-                        std::to_address(storage_.end()));
+  return const_iterator(base::to_address(storage_.begin()),
+                        base::to_address(next_it),
+                        base::to_address(storage_.end()));
 }
 
 Value::List::iterator Value::List::erase(iterator first, iterator last) {
   auto next_it = storage_.erase(storage_.begin() + (first - begin()),
                                 storage_.begin() + (last - begin()));
-  return iterator(std::to_address(storage_.begin()), std::to_address(next_it),
-                  std::to_address(storage_.end()));
+  return iterator(base::to_address(storage_.begin()), base::to_address(next_it),
+                  base::to_address(storage_.end()));
 }
 
 Value::List::const_iterator Value::List::erase(const_iterator first,
                                                const_iterator last) {
   auto next_it = storage_.erase(storage_.begin() + (first - begin()),
                                 storage_.begin() + (last - begin()));
-  return const_iterator(std::to_address(storage_.begin()),
-                        std::to_address(next_it),
-                        std::to_address(storage_.end()));
+  return const_iterator(base::to_address(storage_.begin()),
+                        base::to_address(next_it),
+                        base::to_address(storage_.end()));
 }
 
 Value::List Value::List::Clone() const {
@@ -1175,9 +1176,9 @@
 Value::List::iterator Value::List::Insert(const_iterator pos, Value&& value) {
   auto inserted_it =
       storage_.insert(storage_.begin() + (pos - begin()), std::move(value));
-  return iterator(std::to_address(storage_.begin()),
-                  std::to_address(inserted_it),
-                  std::to_address(storage_.end()));
+  return iterator(base::to_address(storage_.begin()),
+                  base::to_address(inserted_it),
+                  base::to_address(storage_.end()));
 }
 
 size_t Value::List::EraseValue(const Value& value) {
diff -Nur chromium-122.0.6261.69/chrome/browser/accessibility/media_app/ax_media_app_untrusted_handler.cc chromium-122.0.6261.69-b/chrome/browser/accessibility/media_app/ax_media_app_untrusted_handler.cc
--- chromium-122.0.6261.69/chrome/browser/accessibility/media_app/ax_media_app_untrusted_handler.cc	2024-02-23 10:42:48.933311700 +1300
+++ chromium-122.0.6261.69-b/chrome/browser/accessibility/media_app/ax_media_app_untrusted_handler.cc	2024-02-29 13:25:10.971037137 +1300
@@ -10,6 +10,7 @@
 #include "base/check_op.h"
 #include "base/functional/bind.h"
 #include "base/notreached.h"
+#include "base/types/to_address.h"
 #include "chrome/browser/accessibility/accessibility_state_utils.h"
 #include "chrome/browser/profiles/profile.h"
 #include "content/public/browser/browser_context.h"
@@ -63,7 +63,7 @@
     return;
   }
   screen_ai::ScreenAIServiceRouterFactory::GetForBrowserContext(
-      std::to_address(browser_context_))
+      base::to_address(browser_context_))
       ->GetServiceStateAsync(
           screen_ai::ScreenAIServiceRouter::Service::kOCR,
           base::BindOnce(&AXMediaAppUntrustedHandler::OnOCRServiceInitialized,
@@ -88,7 +88,7 @@
 
   screen_ai::ScreenAIServiceRouter* service_router =
       screen_ai::ScreenAIServiceRouterFactory::GetForBrowserContext(
-          std::to_address(browser_context_));
+          base::to_address(browser_context_));
   service_router->BindScreenAIAnnotator(
       screen_ai_annotator_.BindNewPipeAndPassReceiver());
   OcrNextDirtyPageIfAny();
diff -Nur chromium-122.0.6261.69/chrome/browser/ui/views/bookmarks/saved_tab_groups/saved_tab_group_bar.cc chromium-122.0.6261.69-b/chrome/browser/ui/views/bookmarks/saved_tab_groups/saved_tab_group_bar.cc
--- chromium-122.0.6261.69/chrome/browser/ui/views/bookmarks/saved_tab_groups/saved_tab_group_bar.cc	2024-02-23 10:42:55.233747700 +1300
+++ chromium-122.0.6261.69-b/chrome/browser/ui/views/bookmarks/saved_tab_groups/saved_tab_group_bar.cc	2024-02-29 13:23:02.173077115 +1300
@@ -10,6 +10,7 @@
 #include <unordered_map>
 
 #include "base/functional/bind.h"
+#include "base/types/to_address.h"
 #include "base/uuid.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/ui/bookmarks/bookmark_utils_desktop.h"
@@ -105,7 +106,7 @@
     // Convert the event location into `parent_bar_`'s coordinate space.
     const gfx::Point screen_loc = ConvertPointToScreen(this, event.location());
     const gfx::Point bar_loc =
-        ConvertPointFromScreen(std::to_address(parent_bar_), screen_loc);
+        ConvertPointFromScreen(base::to_address(parent_bar_), screen_loc);
     ui::DropTargetEvent event_copy(event);
     event_copy.set_location(bar_loc);
 
diff -Nur chromium-122.0.6261.69/chrome/browser/ui/views/bookmarks/saved_tab_groups/saved_tab_group_button.cc chromium-122.0.6261.69-b/chrome/browser/ui/views/bookmarks/saved_tab_groups/saved_tab_group_button.cc
--- chromium-122.0.6261.69/chrome/browser/ui/views/bookmarks/saved_tab_groups/saved_tab_group_button.cc	2024-02-23 10:42:55.233747700 +1300
+++ chromium-122.0.6261.69-b/chrome/browser/ui/views/bookmarks/saved_tab_groups/saved_tab_group_button.cc	2024-02-29 13:23:02.173077115 +1300
@@ -12,6 +12,7 @@
 #include "base/check.h"
 #include "base/functional/bind.h"
 #include "base/functional/callback_forward.h"
+#include "base/types/to_address.h"
 #include "cc/paint/paint_flags.h"
 #include "chrome/app/vector_icons/vector_icons.h"
 #include "chrome/browser/favicon/favicon_utils.h"
@@ -308,7 +309,7 @@
       local_group_id_.has_value()
           ? SavedTabGroupUtils::GetBrowserWithTabGroupId(
                 local_group_id_.value())
-          : std::to_address(browser_);
+          : &*browser_;
 
   if (!local_group_id_.has_value()) {
     // Open the group in the browser the button was pressed.
diff -Nur chromium-122.0.6261.69/chrome/browser/ui/views/tabs/compound_tab_container.cc chromium-122.0.6261.69-b/chrome/browser/ui/views/tabs/compound_tab_container.cc
--- chromium-122.0.6261.69/chrome/browser/ui/views/tabs/compound_tab_container.cc	2024-02-23 10:42:55.621774700 +1300
+++ chromium-122.0.6261.69-b/chrome/browser/ui/views/tabs/compound_tab_container.cc	2024-02-29 13:23:02.173077115 +1300
@@ -9,6 +9,7 @@
 #include "base/auto_reset.h"
 #include "base/functional/bind.h"
 #include "base/trace_event/trace_event.h"
+#include "base/types/to_address.h"
 #include "chrome/browser/ui/tabs/tab_style.h"
 #include "chrome/browser/ui/tabs/tab_types.h"
 #include "chrome/browser/ui/ui_features.h"
@@ -216,7 +217,7 @@
 
   void AnimationEnded(const gfx::Animation* animation) override {
     TabSlotAnimationDelegate::AnimationEnded(animation);
-    tab_container()->ReturnTabSlotView(std::to_address(slot_view()));
+    tab_container()->ReturnTabSlotView(slot_view());
   }
 };
 }  // namespace
@@ -259,8 +260,8 @@
   // Ensure that happens now so we aren't in a half-destructed state when they
   // do so.
   CancelAnimation();
-  RemoveChildViewT(std::to_address(pinned_tab_container_));
-  RemoveChildViewT(std::to_address(unpinned_tab_container_));
+  RemoveChildViewT(base::to_address(pinned_tab_container_));
+  RemoveChildViewT(base::to_address(unpinned_tab_container_));
 }
 
 void CompoundTabContainer::SetAvailableWidthCallback(
@@ -519,14 +520,14 @@
 
 bool CompoundTabContainer::IsRectInContentArea(const gfx::Rect& rect) {
   if (pinned_tab_container_->IsRectInContentArea(ToEnclosingRect(
-          ConvertRectToTarget(this, std::to_address(pinned_tab_container_),
+          ConvertRectToTarget(this, base::to_address(pinned_tab_container_),
                               gfx::RectF(rect))))) {
     return true;
   }
 
   return unpinned_tab_container_->IsRectInContentArea(
       ToEnclosingRect(ConvertRectToTarget(
-          this, std::to_address(unpinned_tab_container_), gfx::RectF(rect))));
+          this, base::to_address(unpinned_tab_container_), gfx::RectF(rect))));
 }
 
 std::optional<ZOrderableTabContainerElement>
@@ -677,12 +678,12 @@
 
 views::SizeBounds CompoundTabContainer::GetAvailableSize(
     const views::View* child) const {
-  if (child == std::to_address(pinned_tab_container_)) {
+  if (child == base::to_address(pinned_tab_container_)) {
     return views::SizeBounds(GetAvailableWidthForTabContainer(),
                              views::SizeBound());
   }
 
-  CHECK_EQ(child, std::to_address(unpinned_tab_container_));
+  CHECK_EQ(child, base::to_address(unpinned_tab_container_));
   return views::SizeBounds(GetAvailableWidthForUnpinnedTabContainer(),
                            views::SizeBound());
 }
@@ -780,7 +781,7 @@
       event.data(), gfx::PointF(loc_in_sub_target),
       gfx::PointF(loc_in_sub_target), event.source_operations());
 
-  if (sub_drop_target == std::to_address(pinned_tab_container_)) {
+  if (sub_drop_target == base::to_address(pinned_tab_container_)) {
     // Pinned tab container shares an index and coordinate space, so no
     // adjustments needed.
     return sub_drop_target->GetDropIndex(adjusted_event);
@@ -816,9 +817,9 @@
   // Update `current_text_drop_target_`.
   TabContainer* next_drop_target = nullptr;
   if (index.has_value()) {
-    next_drop_target = std::to_address(index.value().value < NumPinnedTabs()
-                                           ? pinned_tab_container_
-                                           : unpinned_tab_container_);
+    next_drop_target = base::to_address(index.value().value < NumPinnedTabs()
+                                            ? pinned_tab_container_
+                                            : unpinned_tab_container_);
   }
   if (next_drop_target != current_text_drop_target_) {
     if (current_text_drop_target_) {
@@ -832,7 +833,7 @@
   }
 
   // Forward to `current_text_drop_target_`, adjusting if needed.
-  if (current_text_drop_target_ == std::to_address(pinned_tab_container_)) {
+  if (current_text_drop_target_ == base::to_address(pinned_tab_container_)) {
     pinned_tab_container_->HandleDragUpdate(index);
   } else {
     BrowserRootView::DropIndex adjusted_index = {
@@ -994,9 +995,9 @@
                        2;
 
   if (point_in_local_coords.x() < cutoff_x) {
-    return std::to_address(pinned_tab_container_);
+    return base::to_address(pinned_tab_container_);
   }
-  return std::to_address(unpinned_tab_container_);
+  return base::to_address(unpinned_tab_container_);
 }
 
 TabContainer* CompoundTabContainer::GetTabContainerAt(
@@ -1011,16 +1012,16 @@
                           unpinned_tab_container_->bounds().x()) /
                          2;
     if (point_in_local_coords.x() < cutoff_x) {
-      return std::to_address(pinned_tab_container_);
+      return base::to_address(pinned_tab_container_);
     }
-    return std::to_address(unpinned_tab_container_);
+    return base::to_address(unpinned_tab_container_);
   }
 
   if (in_pinned) {
-    return std::to_address(pinned_tab_container_);
+    return base::to_address(pinned_tab_container_);
   }
   if (in_unpinned) {
-    return std::to_address(unpinned_tab_container_);
+    return base::to_address(unpinned_tab_container_);
   }
 
   // `point_in_local_coords` might be in neither sub container if our layout is
diff -Nur chromium-122.0.6261.69/chrome/browser/ui/views/tabs/tab_container_impl.cc chromium-122.0.6261.69-b/chrome/browser/ui/views/tabs/tab_container_impl.cc
--- chromium-122.0.6261.69/chrome/browser/ui/views/tabs/tab_container_impl.cc	2024-02-23 10:42:55.629775300 +1300
+++ chromium-122.0.6261.69-b/chrome/browser/ui/views/tabs/tab_container_impl.cc	2024-02-29 13:23:02.174077122 +1300
@@ -9,6 +9,7 @@
 #include "base/bits.h"
 #include "base/containers/adapters.h"
 #include "base/ranges/algorithm.h"
+#include "base/types/to_address.h"
 #include "chrome/browser/ui/layout_constants.h"
 #include "chrome/browser/ui/ui_features.h"
 #include "chrome/browser/ui/views/tabs/tab.h"
@@ -634,7 +635,7 @@
   }
 
   const gfx::Rect overall_target_bounds = gfx::Rect(GetIdealTrailingX(), 0);
-  bounds_animator_.AnimateViewTo(std::to_address(overall_bounds_view_),
+  bounds_animator_.AnimateViewTo(base::to_address(overall_bounds_view_),
                                  overall_target_bounds);
 
   // Because the preferred size of the tabstrip depends on the IsAnimating()
diff -Nur chromium-122.0.6261.69/chrome/browser/ui/views/tabs/tab_strip.cc chromium-122.0.6261.69-b/chrome/browser/ui/views/tabs/tab_strip.cc
--- chromium-122.0.6261.69/chrome/browser/ui/views/tabs/tab_strip.cc	2024-02-29 13:16:56.063348003 +1300
+++ chromium-122.0.6261.69-b/chrome/browser/ui/views/tabs/tab_strip.cc	2024-02-29 13:23:02.174077122 +1300
@@ -38,6 +38,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/time/time.h"
 #include "base/timer/elapsed_timer.h"
+#include "base/types/to_address.h"
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
 #include "chrome/browser/defaults.h"
@@ -750,14 +751,15 @@
     ~ResetDraggingStateDelegate() override = default;
 
     void AnimationProgressed(const gfx::Animation* animation) override {
-      tab_container_->OnTabSlotAnimationProgressed(std::to_address(slot_view_));
+      tab_container_->OnTabSlotAnimationProgressed(
+          base::to_address(slot_view_));
     }
 
     void AnimationEnded(const gfx::Animation* animation) override {
       AnimationProgressed(animation);
       slot_view_->set_animating(false);
       slot_view_->set_dragging(false);
-      tab_container_->ReturnTabSlotView(std::to_address(slot_view_));
+      tab_container_->ReturnTabSlotView(base::to_address(slot_view_));
     }
 
     void AnimationCanceled(const gfx::Animation* animation) override {
@@ -963,7 +965,7 @@
       tab_container_(
           *AddChildViewAt(MakeTabContainer(this,
                                            hover_card_controller_.get(),
-                                           std::to_address(drag_context_)),
+                                           base::to_address(drag_context_)),
                           0)),
       style_(TabStyle::Get()) {
   // TODO(pbos): This is probably incorrect, the background of individual tabs
@@ -992,8 +994,8 @@
   // |tab_container_|'s tabs may call back to us or to |drag_context_| from
   // their destructors. Delete them first so that if they call back we aren't in
   // a weird state.
-  RemoveChildViewT(std::to_address(tab_container_));
-  RemoveChildViewT(std::to_address(drag_context_));
+  RemoveChildViewT(base::to_address(tab_container_));
+  RemoveChildViewT(base::to_address(drag_context_));
 
   CHECK(!IsInObserverList());
 }
@@ -1373,7 +1375,7 @@
 }
 
 TabDragContext* TabStrip::GetDragContext() {
-  return std::to_address(drag_context_);
+  return base::to_address(drag_context_);
 }
 
 bool TabStrip::IsAnimating() const {
@@ -1884,7 +1886,7 @@
 views::SizeBounds TabStrip::GetAvailableSize(const views::View* child) const {
   // We can only reach here if SetAvailableWidthCallback() was never called,
   // e.g. if tab scrolling is disabled. Defer to our parent.
-  DCHECK(child == std::to_address(tab_container_));
+  DCHECK(child == base::to_address(tab_container_));
   return parent()->GetAvailableSize(this);
 }
 
diff -Nur chromium-122.0.6261.69/content/public/test/browser_test_utils.h chromium-122.0.6261.69-b/content/public/test/browser_test_utils.h
--- chromium-122.0.6261.69/content/public/test/browser_test_utils.h	2024-02-23 10:43:06.686540600 +1300
+++ chromium-122.0.6261.69-b/content/public/test/browser_test_utils.h	2024-02-29 13:23:02.175077130 +1300
@@ -26,6 +26,7 @@
 #include "base/template_util.h"
 #include "base/test/metrics/histogram_tester.h"
 #include "base/types/strong_alias.h"
+#include "base/types/to_address.h"
 #include "build/build_config.h"
 #include "cc/test/pixel_test_utils.h"
 #include "components/viz/common/quads/compositor_frame.h"
@@ -552,10 +553,11 @@
 class ToRenderFrameHost {
  public:
   template <typename Ptr>
+    requires requires(Ptr p) { base::to_address(p); }
   // NOLINTNEXTLINE(google-explicit-constructor)
   ToRenderFrameHost(Ptr frame_convertible_value)
       : render_frame_host_(ConvertToRenderFrameHost(
-            std::to_address(frame_convertible_value))) {}
+            base::to_address(frame_convertible_value))) {}
 
   // Extract the underlying frame.
   RenderFrameHost* render_frame_host() const { return render_frame_host_; }
diff -Nur chromium-122.0.6261.69/mojo/public/cpp/bindings/type_converter.h chromium-122.0.6261.69-b/mojo/public/cpp/bindings/type_converter.h
--- chromium-122.0.6261.69/mojo/public/cpp/bindings/type_converter.h	2024-02-23 10:43:15.343140000 +1300
+++ chromium-122.0.6261.69-b/mojo/public/cpp/bindings/type_converter.h	2024-02-29 13:23:02.175077130 +1300
@@ -11,6 +11,8 @@
 #include <memory>
 #include <type_traits>
 
+#include "base/types/to_address.h"
+
 namespace mojo {
 
 // NOTE: When possible, please consider using StructTraits / UnionTraits /
@@ -97,16 +99,16 @@
 
 template <typename T, typename U>
   requires requires(const U& obj) {
-    not std::is_pointer_v<U>;
-    { mojo::ConvertTo<T>(std::to_address(obj)) } -> std::same_as<T>;
+    !std::is_pointer_v<U>;
+    { mojo::ConvertTo<T>(base::to_address(obj)) } -> std::same_as<T>;
   }
 inline T ConvertTo(const U& obj) {
-  return mojo::ConvertTo<T>(std::to_address(obj));
+  return mojo::ConvertTo<T>(base::to_address(obj));
 }
 
 template <typename T, typename U>
   requires requires(const U& obj) {
-    not std::is_pointer_v<U>;
+    !std::is_pointer_v<U>;
     TypeConverter<T, U>::Convert(obj);
   }
 inline T ConvertTo(const U& obj) {
