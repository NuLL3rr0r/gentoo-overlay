--- a/chrome/browser/download/bubble/download_bubble_update_service.cc
+++ b/chrome/browser/download/bubble/download_bubble_update_service.cc
@@ -87,6 +87,7 @@
 // Helper to get an iterator to the last element in the cache. The cache
 // must not be empty.
 template <typename Item>
+typename
 SortedItems<Item>::iterator GetLastIter(SortedItems<Item>& cache) {
   CHECK(!cache.empty());
   auto it = cache.end();
@@ -789,8 +790,10 @@
 }
 
 template <typename Id, typename Item>
+typename
 SortedItems<Item>::iterator
 DownloadBubbleUpdateService::RemoveItemFromCacheByIter(
+    typename
     SortedItems<Item>::iterator iter,
     SortedItems<Item>& cache,
     IterMap<Id, Item>& iter_map) {
--- a/chrome/browser/download/bubble/download_bubble_update_service.h
+++ b/chrome/browser/download/bubble/download_bubble_update_service.h
@@ -208,7 +208,9 @@
 
   // Removes item if we already have the iterator to it. Returns next iterator.
   template <typename Id, typename Item>
+  typename
   SortedItems<Item>::iterator RemoveItemFromCacheByIter(
+      typename
       SortedItems<Item>::iterator iter,
       SortedItems<Item>& cache,
       IterMap<Id, Item>& iter_map);
--- a/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
+++ b/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
@@ -520,8 +520,11 @@
                                 row_auto_repetitions);
 
   bool has_nested_subgrid = false;
-  auto& [grid_items, layout_data, subtree_size] =
+  auto& sizing_data =
       sizing_tree->CreateSizingData(opt_subgrid_data);
+  auto& grid_items = sizing_data.grid_items;
+  auto& layout_data = sizing_data.layout_data;
+  auto& subtree_size = sizing_data.subtree_size;
 
   if (!must_ignore_children) {
     // Construct grid items that are not subgridded.
@@ -1640,8 +1646,11 @@
     const absl::optional<GridTrackSizingDirection>& opt_track_direction) const {
   DCHECK(sizing_subtree);
 
-  auto& [grid_items, layout_data, subtree_size] =
+  auto& sizing_data =
       sizing_subtree.SubtreeRootData();
+  auto& grid_items = sizing_data.grid_items;
+  auto& layout_data = sizing_data.layout_data;
+  auto& subtree_size = sizing_data.subtree_size;
 
   auto InitAndCacheTrackSizes = [&](GridTrackSizingDirection track_direction) {
     InitializeTrackCollection(opt_subgrid_data, track_direction, &layout_data);
--- a/media/base/cdm_promise_adapter.cc
+++ b/media/base/cdm_promise_adapter.cc
@@ -94,7 +94,9 @@
 void CdmPromiseAdapter::Clear(ClearReason reason) {
   // Reject all outstanding promises.
   DCHECK(thread_checker_.CalledOnValidThread());
-  for (auto& [promise_id, promise] : promises_) {
+  for (auto& [p_i, p_e] : promises_) {
+    auto& promise_id = p_i;
+    auto& promise = p_e;
     TRACE_EVENT_NESTABLE_ASYNC_END1(
         "media", "CdmPromise", TRACE_ID_WITH_SCOPE("CdmPromise", promise_id),
         "status", "cleared");
