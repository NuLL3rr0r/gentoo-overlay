--- a/third_party/blink/renderer/platform/fonts/font_face_creation_params.h
+++ b/third_party/blink/renderer/platform/fonts/font_face_creation_params.h
@@ -52,14 +52,14 @@
   FontFaceCreationParams()
       : creation_type_(kCreateFontByFamily),
         family_(AtomicString()),
-        filename_(std::string()),
+        filename_(WTF::String()),
         fontconfig_interface_id_(0),
         ttc_index_(0) {}
 
   explicit FontFaceCreationParams(AtomicString family)
       : creation_type_(kCreateFontByFamily),
         family_(family),
-        filename_(std::string()),
+        filename_(WTF::String()),
         fontconfig_interface_id_(0),
         ttc_index_(0) {
 #if BUILDFLAG(IS_WIN)
@@ -73,7 +73,7 @@
 #endif
   }
 
-  FontFaceCreationParams(const std::string& filename,
+  FontFaceCreationParams(const WTF::String& filename,
                          int fontconfig_interface_id,
                          int ttc_index = 0)
       : creation_type_(kCreateFontByFciIdAndTtcIndex),
@@ -86,7 +86,7 @@
     DCHECK_EQ(creation_type_, kCreateFontByFamily);
     return family_;
   }
-  const std::string& Filename() const {
+  const WTF::String& Filename() const {
     DCHECK_EQ(creation_type_, kCreateFontByFciIdAndTtcIndex);
     return filename_;
   }
@@ -106,7 +106,7 @@
       // encoding and endianness. However, since the hash is not transferred
       // over a network or permanently stored and only used for the runtime of
       // Chromium, this is not a concern.
-      hasher.AddCharacters(reinterpret_cast<const LChar*>(filename_.data()),
+      hasher.AddCharacters(reinterpret_cast<const LChar*>(filename_.Utf8().data()),
                            static_cast<unsigned>(filename_.length()));
       hasher.AddCharacters(reinterpret_cast<const LChar*>(&ttc_index_),
                            sizeof(ttc_index_));
@@ -129,7 +129,7 @@
  private:
   FontFaceCreationType creation_type_;
   AtomicString family_;
-  std::string filename_;
+  WTF::String filename_;
   int fontconfig_interface_id_;
   int ttc_index_;
 };
--- a/third_party/blink/renderer/platform/fonts/linux/font_cache_linux.cc
+++ b/third_party/blink/renderer/platform/fonts/linux/font_cache_linux.cc
@@ -111,7 +111,7 @@
 
   FontFaceCreationParams creation_params;
   creation_params = FontFaceCreationParams(
-      fallback_font.filepath.value(), fallback_font.fontconfig_interface_id,
+      WTF::String(fallback_font.filepath.value()), fallback_font.fontconfig_interface_id,
       fallback_font.ttc_index);
 
   // Changes weight and/or italic of given FontDescription depends on
--- a/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc
+++ b/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc
@@ -234,7 +234,7 @@
           creation_params.FontconfigInterfaceId(), creation_params.TtcIndex());
     }
     return SkTypeface_Factory::FromFilenameAndTtcIndex(
-        creation_params.Filename().data(), creation_params.TtcIndex());
+        creation_params.Filename().Utf8().data(), creation_params.TtcIndex());
   }
 #endif
 
