diff -ru chromium-121.0.6167.160.orig/third_party/blink/renderer/modules/handwriting/handwriting_type_converters.cc chromium-121.0.6167.160/third_party/blink/renderer/modules/handwriting/handwriting_type_converters.cc
--- chromium-121.0.6167.160.orig/third_party/blink/renderer/modules/handwriting/handwriting_type_converters.cc	2024-02-07 00:00:00.000000000 +0000
+++ chromium-121.0.6167.160/third_party/blink/renderer/modules/handwriting/handwriting_type_converters.cc	2024-02-10 00:00:00.000000000 +0000
@@ -19,6 +19,8 @@
 #include "third_party/blink/renderer/modules/handwriting/handwriting_stroke.h"
 #include "third_party/blink/renderer/modules/modules_export.h"
 
+#include <memory>
+
 namespace mojo {
 
 using handwriting::mojom::blink::HandwritingDrawingSegmentPtr;
@@ -45,6 +47,11 @@
   return output;
 }
 
+template <>
+inline HandwritingPointPtr ConvertTo(const cppgc::internal::BasicMember<const blink::HandwritingPoint, cppgc::internal::StrongMemberTag, cppgc::internal::DijkstraWriteBarrierPolicy> &obj) {
+    return mojo::ConvertTo<HandwritingPointPtr>(std::to_address(obj));
+}
+
 // static
 HandwritingStrokePtr
 TypeConverter<HandwritingStrokePtr, blink::HandwritingStroke*>::Convert(
diff -ru chromium-121.0.6167.160.orig/third_party/blink/renderer/modules/payments/secure_payment_confirmation_type_converter.cc chromium-121.0.6167.160/third_party/blink/renderer/modules/payments/secure_payment_confirmation_type_converter.cc
--- chromium-121.0.6167.160.orig/third_party/blink/renderer/modules/payments/secure_payment_confirmation_type_converter.cc	2024-02-07 00:00:00.000000000 +0000
+++ chromium-121.0.6167.160/third_party/blink/renderer/modules/payments/secure_payment_confirmation_type_converter.cc	2024-02-10 00:00:00.000000000 +0000
@@ -17,6 +17,14 @@
 
 namespace mojo {
 
+template <>
+inline 
+Vector<uint8_t> ConvertTo(const
+      cppgc::internal::BasicMember<blink::V8UnionArrayBufferOrArrayBufferView, cppgc::internal::StrongMemberTag, cppgc::internal::DijkstraWriteBarrierPolicy> &obj) {
+    return mojo::ConvertTo< Vector<uint8_t> >(std::to_address(obj));
+} 
+
+
 payments::mojom::blink::SecurePaymentConfirmationRequestPtr
 TypeConverter<payments::mojom::blink::SecurePaymentConfirmationRequestPtr,
               blink::SecurePaymentConfirmationRequest*>::
diff -ru chromium-121.0.6167.160.orig/ui/display/types/display_color_management.h chromium-121.0.6167.160/ui/display/types/display_color_management.h
--- chromium-121.0.6167.160.orig/ui/display/types/display_color_management.h	2024-02-07 00:00:00.000000000 +0000
+++ chromium-121.0.6167.160/ui/display/types/display_color_management.h	2024-02-09 00:00:00.000000000 +0000
@@ -5,6 +5,7 @@
 #define UI_DISPLAY_TYPES_DISPLAY_COLOR_MANAGEMENT_H_
 
 #include <memory>
+#include <string>
 #include <vector>
 
 #include "third_party/skia/modules/skcms/skcms.h"
diff -ru chromium-121.0.6167.160.orig/ui/gfx/x/visual_manager.cc chromium-121.0.6167.160/ui/gfx/x/visual_manager.cc
--- chromium-121.0.6167.160.orig/ui/gfx/x/visual_manager.cc	2024-02-07 00:00:00.000000000 +0000
+++ chromium-121.0.6167.160/ui/gfx/x/visual_manager.cc	2024-02-09 00:00:00.000000000 +0000
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <bitset>
 #include "ui/gfx/x/visual_manager.h"
 
 #include "base/strings/string_number_conversions.h"
--- a/mojo/public/cpp/bindings/type_converter.h
+++ b/mojo/public/cpp/bindings/type_converter.h
@@ -96,21 +96,9 @@
 }
 
 template <typename T, typename U>
-  requires requires(const U& obj) {
-    not std::is_pointer_v<U>;
-    { mojo::ConvertTo<T>(std::to_address(obj)) } -> std::same_as<T>;
-  }
+requires(!std::is_pointer_v<U>)
 inline T ConvertTo(const U& obj) {
-  return mojo::ConvertTo<T>(std::to_address(obj));
-}
-
-template <typename T, typename U>
-  requires requires(const U& obj) {
-    not std::is_pointer_v<U>;
-    TypeConverter<T, U>::Convert(obj);
-  }
-inline T ConvertTo(const U& obj) {
-  return TypeConverter<T, U>::Convert(obj);
+return TypeConverter<T, U>::Convert(obj);
 }
 
 template <typename T>
